/*
 *  The code is part of our project called DrTM, which leverages HTM and RDMA for speedy distributed
 *  in-memory transactions.
 *
 *
 * Copyright (C) 2015 Institute of Parallel and Distributed Systems (IPADS), Shanghai Jiao Tong University
 *     All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  For more about this software, visit:  http://ipads.se.sjtu.edu.cn/drtm.html
 *
 */

#ifndef _NDB_BENCH_H_
#define _NDB_BENCH_H_

#include <stdint.h>

#include <map>
#include <vector>
#include <utility>
#include <string>

#include "abstract_db.h"
#include "macros.h"
#include "thread.h"
#include "util.h"
#include "spinbarrier.h"
#include "memstore/rdma_resource.h"

#define MAX_CLIENTS 32
#define MAX_THREADS 128

// 6M should be enough to hold the latencies generated by one thread worker
#define MAX_LATENCIES (6 * 1000 * 1000)
typedef  float AMOUNT;

//#define LAT//measure latency flag

//typedef int64_t AMOUNT;

void PinToTPCCCPU(int w_id);

void ProcessDeliveryPEntry(void* arg, uint64_t* minSeq);
void ProcessNewOrderPEntry(void* arg, uint64_t* minSeq);

extern void ycsb_do_test(abstract_db *db, int argc, char **argv);
extern void tpcc_do_test(int argc, char **argv);
extern void bank_do_test(int argc, char **argv);
extern void simple_do_test(int argc, char **argv);
extern void queue_do_test(abstract_db *db, int argc, char **argv);
extern void encstress_do_test(abstract_db *db, int argc, char **argv);
extern void seats_do_test(int argc,char **argv);
extern void bank_do_test(int argc,char **argv);

enum {
  RUNMODE_TIME = 0,
  RUNMODE_OPS  = 1
};

// benchmark global variables
extern size_t nthreads;
extern volatile bool running;
extern int verbose;
extern uint64_t txn_flags;
extern double scale_factor;
extern uint64_t runtime;
extern uint64_t ops_per_worker;
extern int run_mode;
extern int enable_parallel_loading;
extern int pin_cpus;
extern int slow_exit;
extern int retry_aborted_transaction;
extern int no_reset_counters;
extern int backoff_aborted_transaction;


extern uint64_t read_bytes[MAX_THREADS];
extern uint64_t write_bytes[MAX_THREADS];

// counters
extern uint64_t rdma_reads[MAX_CLIENTS][MAX_THREADS];
extern uint64_t rdma_writes[MAX_CLIENTS][MAX_THREADS];
extern uint64_t rdma_atomics[MAX_CLIENTS][MAX_THREADS];
extern uint64_t rdma_searches[MAX_CLIENTS][MAX_THREADS];

extern uint64_t time_rdma_op[MAX_THREADS];

// global variables that will be only used by simple benchmark
extern uint64_t g_rdma_size;
extern uint64_t g_rdmatablesize;
extern uint64_t g_records_per_thread;
extern uint64_t g_reads_per_txn;
extern uint64_t g_writes_per_txn;

// For distributed use
extern size_t total_partition;
extern size_t current_partition;
extern std::string config_file;

class mytimer {
public:
    static inline uint64_t timestamp() {
        struct timespec tp;
        clock_gettime(CLOCK_REALTIME, &tp);
        const uint64_t billion = 1000000000UL;
        return tp.tv_sec * billion + tp.tv_nsec;
    }

    static inline uint64_t rdtsc() {
        uint64_t ret = 0;
#if defined(__i386__)
        __asm__ __volatile__("rdtsc" : "=A" (ret));
#elif defined(__x86_64__)
        unsigned hi, lo;
        __asm__ __volatile__ ("rdtsc" : "=a"(lo), "=d"(hi));
        ret = ((uint64_t)lo)|(((uint64_t)hi) << 32);
#else
        assert(false);
#endif
        return ret;
    }
};

inline size_t get_start_wid(){
  return current_partition*scale_factor+1;
}
inline size_t get_end_wid(){
  return (current_partition+1)*scale_factor;
}
inline size_t NumWarehousePerPartition()
{
  return (size_t) scale_factor;
}
inline size_t wid_to_pid(size_t wid){
  return (wid-1)/NumWarehousePerPartition();
}

class scoped_db_thread_ctx {
 public:



  scoped_db_thread_ctx(const scoped_db_thread_ctx &) = delete;
  scoped_db_thread_ctx(scoped_db_thread_ctx &&) = delete;
  scoped_db_thread_ctx &operator=(const scoped_db_thread_ctx &) = delete;

  scoped_db_thread_ctx(abstract_db *db, bool loader)
    : db(db)
  {
    //db->thread_init(loader);
  }
  ~scoped_db_thread_ctx()
  {
    //db->thread_end();
  }
private:
  abstract_db *const db;
};

class bench_loader : public ndb_thread {
public:
  bench_loader(unsigned long seed, abstract_db *db)
    : r(seed), db(db),  b(0)
  {
    txn_obj_buf.reserve(2 * CACHELINE_SIZE);
  //  txn_obj_buf.resize(db->sizeof_txn_object(txn_flags));
  }
  inline void
  set_barrier(spin_barrier &b)
  {
    ALWAYS_ASSERT(!this->b);
    this->b = &b;
  }
  virtual void
  run()
  {
    { // XXX(stephentu): this is a hack
 //     scoped_rcu_region r; // register this thread in rcu region
    }
    ALWAYS_ASSERT(b);
    b->count_down();
    b->wait_for();
    scoped_db_thread_ctx ctx(db, true);
    load();
  }
protected:
  inline void *txn_buf() { return (void *) txn_obj_buf.data(); }

  virtual void load() = 0;

  util::fast_random r;
  abstract_db *const db;
  spin_barrier *b;
  std::string txn_obj_buf;
//  str_arena arena;

};

class bench_worker : public ndb_thread {
public:
  // to hold the latencies
  std::vector<uint64_t> *latencies;

  uint64_t secs;
  static uint64_t total_ops;

  bench_worker(unsigned int worker_id,
               bool set_core_id,
               unsigned long seed, abstract_db *db,

               spin_barrier *barrier_a, spin_barrier *barrier_b )
    : worker_id(worker_id), set_core_id(set_core_id),
      r(seed), db(db),
      barrier_a(barrier_a), barrier_b(barrier_b),
      // the ntxn_* numbers are per worker
      ntxn_commits(0), ntxn_aborts(0),
      latency_numer_us(0),
      backoff_shifts(0), // spin between [0, 2^backoff_shifts) times before retry
	  size_delta(0)
  {
    txn_obj_buf.reserve(2 * CACHELINE_SIZE);
 //   txn_obj_buf.resize(db->sizeof_txn_object(txn_flags));
#ifdef LAT
    latency_buffer.reserve(ops_per_worker);//for opt
#endif

    // reserver some spaces for the latencies
    latencies = new std::vector<uint64_t>();
    latencies->reserve(MAX_LATENCIES);
  }

  virtual ~bench_worker() {}
  virtual bool processDelayed() {}
  virtual bool processDelayed(void *en) {}
  virtual void ending(std::string msg) {} //finish up

  // returns [did_commit?, size_increase_bytes]
  typedef std::pair<bool, ssize_t> txn_result;
  typedef txn_result (*txn_fn_t)(bench_worker *);

  struct workload_desc {
    workload_desc() {}
    workload_desc(const std::string &name, double frequency, txn_fn_t fn)
      : name(name), frequency(frequency), fn(fn)
    {
      ALWAYS_ASSERT(frequency > 0.0);
      ALWAYS_ASSERT(frequency <= 1.0);
    }
    std::string name;
    double frequency;
    txn_fn_t fn;
  };
  typedef std::vector<workload_desc> workload_desc_vec;
  virtual workload_desc_vec get_workload() const = 0;

  virtual void run();
  virtual bool check_consistency(){};
  inline size_t get_ntxn_commits() const { return ntxn_commits; }
  inline size_t get_ntxn_aborts() const { return ntxn_aborts; }

  inline uint64_t get_latency_numer_us() const { return latency_numer_us; }

  inline double
  get_avg_latency_us() const
  {
    return double(latency_numer_us) / double(ntxn_commits);
  }

  std::map<std::string, size_t> get_txn_counts() const;

  std::vector<uint64_t > latency_buffer;

  typedef abstract_db::counter_map counter_map;
  typedef abstract_db::txn_counter_map txn_counter_map;

#ifdef ENABLE_BENCH_TXN_COUNTERS
  inline txn_counter_map
  get_local_txn_counters() const
  {
    return local_txn_counters;
  }
#endif

  inline ssize_t get_size_delta() const { return size_delta; }

protected:

  virtual void on_run_setup() {}

  inline void *txn_buf() { return (void *) txn_obj_buf.data(); }

  unsigned int worker_id;
  bool set_core_id;
  util::fast_random r;
  abstract_db *const db;
  spin_barrier *const barrier_a;
  spin_barrier *const barrier_b;

private:
  size_t ntxn_commits;
  size_t ntxn_aborts;
  uint64_t latency_numer_us;
  unsigned backoff_shifts;

protected:

#ifdef ENABLE_BENCH_TXN_COUNTERS
  txn_counter_map local_txn_counters;
  void measure_txn_counters(void *txn, const char *txn_name);
#else
  inline ALWAYS_INLINE void measure_txn_counters(void *txn, const char *txn_name) {}
#endif

  std::vector<size_t> txn_counts; // breakdown of txns
  ssize_t size_delta; // how many logical bytes (of values) did the worker add to the DB

  std::string txn_obj_buf;
//  str_arena arena;
};

class bench_runner {
public:
  bench_runner(const bench_runner &) = delete;
  bench_runner(bench_runner &&) = delete;
  bench_runner &operator=(const bench_runner &) = delete;

  bench_runner(abstract_db *db)
    : db(db), barrier_a(nthreads), barrier_b(1) {}
  virtual ~bench_runner() {}
  void run();

protected:
  // only called once
  virtual std::vector<bench_loader*> make_loaders() = 0;

  // only called once
  virtual std::vector<bench_worker*> make_workers() = 0;
  virtual void init_rdma() = 0;
  virtual void final_check() = 0;
  virtual void sync_log() = 0;
  virtual void initPut() = 0;
  abstract_db *const db;

  // barriers for actual benchmark execution
  spin_barrier barrier_a;
  spin_barrier barrier_b;

  //for distributed settings
  drtm::RdmaResource *rdma;
};

#endif /* _NDB_BENCH_H_ */
